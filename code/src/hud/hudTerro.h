/*
 * @Author: Anthony 
 */
#ifndef HUD_H
#define HUD_H 

#include "SFML/Window.hpp"
#include <TGUI/TGUI.hpp> 
#include <string> 
#include <iostream> 
#include <sstream> 
#include "../scenario/Stack.h"
#include "../scenario/PreStack.h"
#include "graphic_context_iso.h"

enum ButtonState {BS_INVENT, BS_ACTIONS};

class LocalState;

/**
 * @brief The HudTerro class
 * Handles the buttons for the Terrorist's view
 * Displays information for the Terrorist
 * Captures keys pressed/released and clicks
 * and sends them to scenario
 */
class HudTerro: public PreHud {
public:
  /**
   * @brief HudTerro's constructor
   * @param window : the window where the widgets will be drawn
   * @param simulation : the simulation
   * @param context : the context
   */
	HudTerro(sf::RenderWindow* window, LocalState& simulation, GraphicContextIso& context);
  /**
   * @brief Updates the widgets
   * must be called at the beginning of the main loop
   */
	void init();
  /**
   * @brief Handles events sush as key pressed/released or click
   * must be called in the main loop, after HudTerro::init 
   * and before HudTerro::callback
   * @param window : the window where the widgets are displayed 
   * (needed to eventually close it)
   * @param event : the event to handle
   * @param context : the context
   */
	void event(sf::RenderWindow* window, sf::Event event, GraphicContextIso& context);
  /**
   * @brief Handles the callbacks generated by using a widget
   * @param callback_id : the ID of the callback
   */
	void callback(unsigned int callback_id);
  /**
   * @brief Draw the widgets in the new frame
   * must be called in the main loop, after HudTerro::init 
   * and HudTerro::event
   */
	void draw();
  /**
   * @brief Updates the waitFor flag
   * Used by scenario, for instance when we must target an NPC to complete an action
   * @param w : the new value of the flag
   */
	void setwf(WaitFor w);
  /**
   * @brief Displays a message on the screen
   * @param message : the message to display
   */
  void newMessage(std::string message);
 /**
   * @brief Removes the message displayed by HudTerro::newMessage
   */
  void deleteMessage();

	Stack* stack;
  ~HudTerro();

	/* In the main loop, the 3 methods must be called in this specific order :
	 * init();
	 * event(window, event, context);
	 * draw();
	 */

private:
  // Indicates if when can generate a movement with a click
  bool mouseMovement;

  // The size of the window
	unsigned int w;
	unsigned int h;

	int i;
	LocalState& simulation;
  GraphicContextIso& context;

 // Indicates if a direction key is currently pressed
	bool bup;
	bool bdown;
	bool bleft;
	bool bright;

	tgui::Gui hud;

	std::vector<int> inventory;

  // We remember all the created widgets in a list
  // in order to delete them when needed
	std::list<ActionType> actionTypeList;
	std::list<tgui::Button::Ptr> buttonsList;
  std::list<tgui::Label::Ptr> messagesList;

  // Flag indicating if we must test a special action on the click
	WaitFor waitFor;

  // Flags indicating which set of buttons we need to display
	ButtonState currentState;
	ButtonState nextState;

  // Remember the item's ID used in the inventory
  // in order to send information later to scenario
	int currentStuffID;
};

#endif

