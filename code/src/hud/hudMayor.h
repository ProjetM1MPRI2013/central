/*
 * @Author: Anthony
 */
#ifndef HUDM_H
#define HUDM_H

#include "SFML/Window.hpp"
#include <TGUI/TGUI.hpp>
#include <string>
#include <iostream>
#include <sstream>
#include "../scenario/Stack.h"
#include "../scenario/ActionsPC.h"
class TileMap;

enum MayorState {MAYOR_ACTIONS, MAYOR_NUMBERS}; 

enum CurrentAction {CA_CAM1, CA_CAM2, CA_COP}; 

class Simulation;

/**
 * @brief The HudMayor class
 * Handles the buttons for the Mayor's view
 * Displays information for the Mayor
 * Captures keys pressed/released and clicks
 * and sends them to scenario
 */
class HudMayor: public PreHud {
public:
  /**
   * @brief HudMayor's constructor
   * @param window : the window where the widgets will be drawn
   * @param simulation : the simulation
   */
	HudMayor(sf::RenderWindow* window, Simulation& simulation);
  /**
   * @brief Updates the widgets
   * must be called at the beginning of the main loop
   * @param simulation : the simulation
   */
	void init(Simulation& simulation);
  /**
   * @brief Handles events sush as key pressed/released or click
   * must be called in the main loop, after HudMayor::init 
   * and before HudMayor::callback
   * @param window : the window where the widgets are displayed 
   * (needed to eventually close it)
   * @param event : the event to handle
   * @param tilemap : a TileMap
   * @param localState : the LocalState
   */
	void event(sf::RenderWindow* window, sf::Event event, TileMap* tilemap, 
              LocalState* localState);
  /**
   * @brief Handles the callbacks generated by using a widget
   * @param callback_id : the ID of the callback
   */
	void callback(unsigned int callback_id);
  /**
   * @brief Draw the widgets in the new frame
   * must be called in the main loop, after HudMayor::init 
   * and HudMayor::event
   */
	void draw();
  /**
   * @brief Updates the waitFor flag
   * Used by scenario, for instance when we must target an NPC to complete an action
   * @param w : the new value of the flag
   */
	void setwf(WaitFor w);
  /**
   * @brief Displays a message on the screen
   * @param message : the message to display
   */
  void newMessage(std::string message);
  /**
   * @brief Removes the message displayed by HudMayor::newMessage
   */
  void deleteMessage();

	/* In the main loop, the 3 methods must be called in this specific order :
	 * init(simulation);
	 * event(window, event, tilemap);
	 * draw();
	 */

private:
  // Indicates if when can generate a movement with a click
  bool mouseMovement;

  // The size of the window
	unsigned int w;
	unsigned int h;

	unsigned int i;
	Simulation& simulation;
  
  // Indicates if a direction key is currently pressed
  bool bup;
  bool bdown;
  bool bleft; 
  bool bright;

	tgui::Gui hud;

  // We remember all the created widgets in a list
  // in order to delete them when needed
	std::list<tgui::Button::Ptr> buttonsList;
  std::list<tgui::Label::Ptr> goldList;
  std::list<tgui::Label::Ptr> messagesList;
  
  // Flags indicating which set of buttons we need to display
  MayorState currentState; 
  MayorState nextState; 

  // Flags remembering which buttons were clicked 
  // in order to send information later to scenario
  CurrentAction currentAction; 
  unsigned int currentNumber; 

  // Flag indicating if we must test a special action on the click
	WaitFor waitFor;

  int gold;
};

#endif

