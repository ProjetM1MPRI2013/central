#ifndef EVENT_LISTENER_H
#define EVENT_LISTENER_H

#include <simulation.h>


/**
 * @brief EventListeners may subscribe to events generated by the Simulation
 */

class EventListener : public IdCarrier {

private: 
  Simulation& simulation;

protected :
 	 /**
     * @brief subscribe to events of type eventT on target using callback
     * @param eventT: type of event being subscribed to (can be empty)
     * @param target: object the event is about
     * @param callback: a method of the instance inheriting from EventListener 
    */
    template <typename TargetT>
    void subscribe(EventName eventT, TargetT& target, std::function<void (EventName, TargetT&)> callback);

    /**
     * @brief unsubscribe to events of type eventT on target
     */
    template <typename TargetT>
    void unsubscribe(EventName eventT, TargetT& target);

    //bool operator< (const EventListener& x);
};


/* Subscribe and unsubscribe implementation in header because of the template */

template <typename TargetT>
void EventListener::subscribe(EventName eventT, TargetT& target, std::function<void (EventName, TargetT&)> callback) {
  simulation.subscribe(eventT, target, this, callback);
};

template <typename TargetT>
void EventListener::unsubscribe(EventName eventT, TargetT& target) {
  simulation.unsubscribe(eventT, target, this);
};


#endif // EVENT_LISTENER_H
